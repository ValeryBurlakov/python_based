# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
# üìå –§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ:
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
# üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
from typing import Callable
import json
from random import randint
from pathlib import Path




def counter(num: int = 1):
    def deco(func: Callable) -> Callable:
        list_res = []

        def wrapper(*args, **kwargs):
            for _ in range(num):
                result = func(*args, **kwargs)
                list_res.append(result)
            return list_res

        return wrapper

    return deco


def number_control(func: Callable) -> Callable:
    low_num = 1
    up_num = 100
    low_count = 1
    up_count = 10

    def wrapper(num: int, count: int):
        if not low_num <= num <= up_num:
            num = randint(low_num, up_num)
        if not low_count <= count <= up_count:
            count = randint(low_count, up_count)
        result = func(num, count)
        return result

    return wrapper


def my_logger(func: Callable) -> Callable:
    file = Path(f'{func.__name__}.json')
    if file.is_file():
        with open(file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    else:
        data = []

    def wrapper(*args, **kwargs):
        dict_json = {'args': args, **kwargs}
        result = func(*args, **kwargs)
        dict_json['result'] = result
        data.append(dict_json)

        with open(file, 'w', encoding='utf-8') as f_write:
            json.dump(data, f_write, ensure_ascii=False, indent=2)
        return result

    return wrapper


@counter(2)
@number_control
@my_logger
def guessing_game(num, count):
    for i in range(1, count + 1):
        print(f"–ü–æ–ø—ã—Ç–∫–∞ {i}")
        guess_number = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: "))
        if guess_number == num:
            print(f"–í—ã —É–≥–∞–¥–∞–ª–∏, —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ {guess_number}")
            return f'–ß–∏—Å–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ, {num=}'
        elif guess_number > num:
            print("–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ")
        elif guess_number < num:
            print("–ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ")
    else:
        return f'–ß–∏—Å–ª–æ –Ω–µ –æ—Ç–≥–∞–¥–∞–Ω–æ, {num=}'


if __name__ == '__main__':
    guessing_game(1234, 23)
