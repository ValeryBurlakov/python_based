# –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å).
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã.
import json
from pathlib import Path

from seminars.seminar_13.task_5 import User, Project, AccessError, LevelError

import pytest


@pytest.fixture
def new_set():
    data = {User('–ò—Ä–∞', 432, 1),
            User('–ò–≤–∞–Ω', 567, 2),
            User('–ú–∞—Ä–∏—è', 123, 3),
            User('–†–æ–º–∞–Ω', 6895, 4)}
    return data


@pytest.fixture
def new_user():
    return User('new', 7384, 5)

@pytest.fixture
def good_user():
    return User('–ú–∞—Ä–∏—è', 123, 3)


# def test_add_user(good_user):
#     project = Project()
#     project.read_json(Path('users.json'))
#     project.enter_project('–ú–∞—Ä–∏—è', 123)
#     result = project.add_user('new', 7384, 1)
#     assert new_user() == result


def test_load(new_set):
    project = Project()
    result = project.read_json(Path('users.json'))
    assert result == new_set


def test_enter(good_user):
    project = Project()
    project.read_json(Path('users.json'))
    result = project.enter_project('–ú–∞—Ä–∏—è', 123)
    assert result == good_user


def test_no_enter():
    project = Project()
    project.read_json(Path('users.json'))
    with pytest.raises(AccessError):
        project.enter_project('–õ–µ–æ–Ω–∏–¥', 123)


if __name__ == '__main__':
    pytest.main(['-v'])
